#!/bin/bash

shopt -s expand_aliases

alias _muil_mail='selectr mu find -t -s d --reverse -f \"d f s [g]\|\|l\" \"%\" \| head -n 40'
alias _test_selectr='selectr echo \" % maildir \"'
alias _muil_personal_contacts='selectr mu cfind "%" \| head -n 40 | sed "s/\([^ ]*\)$/<\1>/g"'

# Search contacts
alias muc='_muil_personal_contacts'
# Fetch and index emails
alias mus='mbsync -a && mu index --my-address="$MUIL_EMAIL"'
# Select an email and save the id to $MUID
alias muf='export MUID="$(_muil_mail)"'
# View HTML email as text
# TODO: Need to replace the extraction part. This is just an example of how to
# extract and format HTML email as plain text.
alias muh='mu extract "$MUID" --parts=1 --overwrite --target-dir=/tmp && iconv -f iso-8859-1 -t utf-8 /tmp/1.part | pandoc -f html -t plain --reference-links'
# View email in editor
alias mue='mu view "$MUID" | '$MUIL_EDITOR
# View email
alias muv='mu view "$MUID"'

# Edit mail
alias vimm='vim "+set ft=mail"'
# Send an email
alias sm='( echo "To: "; echo "Subject: "; echo; echo; ) | vipe | msmtp -t'

alias la='ls -a'
alias ll='ls -l'
alias lla='ls -la'

function b64sourcemap() {
  gsed -i'' 's#\(//\# sourceMappingURL=\)\(.*\)$#echo "\1data:application/json;charset=utf-8;base64,`base64 < \2`"#ge' $1
}

function readlinkf() {
  ( cd ${1%/*} && pwd -P )
}

function notify() {
  /usr/bin/osascript -e "display notification \"$*\""
}
POMO_TIMEOUT_M=1
POMO_TIMEOUT_S=$(expr 60 "*" $POMO_TIMEOUT_M)
alias pomo="echo Notification in ${POMO_TIMEOUT_M}m ; sleep $POMO_TIMEOUT_S && notify Take a break!"

# .app's in /Applications
alias chrome='open -a "Google Chrome" --args'
alias chrome-canary='open -a "Google Chrome Canary" --args'
alias chrome-cors='open -a "Google Chrome" --args --disable-web-security'
alias chrome-canary-cors='open -a "Google Chrome Canary" --args --disable-web-security'

# Open an URL in a specific Google Chrome tab.
# Usage: chrometab <url> [tab-id]
function chrome-tab {
  id=$2
  if [ $id ]; then
    chrome-cli list tabs | grep -q ":$id"
    id=$([ $? == 0 ] && (chrome-cli open "$1" -t $id; echo $id))
  fi
  [ ! $id ] && id=$(chrome-cli open "$1" | grep -Eo '\d+')
  echo $id
}

# TODO: Get the correct lib path from cabal config.
# ghc-pkg-reset
# Removes all installed GHC/cabal packages, but not binaries, docs, etc.
# Use this to get out of dependency hell and start over, at the cost of some rebuilding time.
function ghc-pkg-reset {
  read -p 'erasing all your user ghc and cabal packages - are you sure (y/n) ? ' ans
  test x$ans == xy && ( \
    echo 'erasing directories under ~/.ghc'; rm -rf `find ~/.ghc -maxdepth 1 -type d`; \
    echo 'erasing ~/.cabal/lib'; rm -rf ~/.cabal/lib; \
    # echo 'erasing ~/.cabal/packages'; rm -rf ~/.cabal/packages; \
    # echo 'erasing ~/.cabal/share'; rm -rf ~/.cabal/share; \
    )
}

# TODO: Get the correct lib path from cabal config and check for a sandbox.
function hdocf {
  find ~/.cabal/share/doc/x86_64-osx-ghc-*/*/html \
    -iname "$(echo $1 | tr . -).html" -and -not -name "mini_*" -maxdepth 1 -exec basename {} .html \; | tr - .
}
function hdoci {
  cat ~/.cabal/share/doc/x86_64-osx-ghc-*/*/html/$(echo $1 | tr . -).html | pandoc -f html -t plain
}
function hdoc {
  hdoci $(hdocf $1 | head -n1)
}

alias docker-env='eval $(docker-machine env default)'

. ~/.alias.local
